#!/usr/bin/env python3
"""
Script de teste para demonstrar o funcionamento dos endpoints de autentica√ß√£o.
Execute este script ap√≥s inicializar o servidor para testar as funcionalidades.

Uso:
    python scripts/test_auth.py
"""

import requests
import json
import time
import sys
import os

# Configura√ß√µes
BASE_URL = "http://localhost:8000"
TEST_EMAIL = "admin@iotrac.com"
TEST_PASSWORD = "Admin123!@#"
TEST_NAME = "Administrador IOTRAC"
TEST_PHONE = "+5511999999999"

def print_header(title):
    """Imprime cabe√ßalho formatado."""
    print("\n" + "="*60)
    print(f"  {title}")
    print("="*60)

def print_step(step, description):
    """Imprime passo do teste."""
    print(f"\n[PASSO {step}] {description}")
    print("-" * 40)

def print_response(response, show_full=False):
    """Imprime resposta da API."""
    print(f"Status: {response.status_code}")
    if show_full:
        try:
            data = response.json()
            print(f"Response: {json.dumps(data, indent=2, ensure_ascii=False)}")
        except:
            print(f"Response: {response.text}")
    else:
        try:
            data = response.json()
            if 'message' in data:
                print(f"Message: {data['message']}")
            if 'success' in data:
                print(f"Success: {data['success']}")
        except:
            print(f"Response: {response.text}")

def test_server_connection():
    """Testa conex√£o com o servidor."""
    print_step(1, "Testando conex√£o com o servidor")
    
    try:
        response = requests.get(f"{BASE_URL}/")
        print_response(response)
        
        if response.status_code == 200:
            print("‚úÖ Servidor est√° rodando!")
            return True
        else:
            print("‚ùå Servidor n√£o est√° respondendo corretamente")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå N√£o foi poss√≠vel conectar ao servidor")
        print(f"   Certifique-se que o servidor est√° rodando em {BASE_URL}")
        return False

def test_user_registration():
    """Testa registro de usu√°rio."""
    print_step(2, "Testando registro de usu√°rio")
    
    user_data = {
        "email": TEST_EMAIL,
        "password": TEST_PASSWORD,
        "confirm_password": TEST_PASSWORD,
        "full_name": TEST_NAME,
        "phone": TEST_PHONE,
        "role": "admin"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/register", json=user_data)
        print_response(response, show_full=True)
        
        if response.status_code == 200:
            print("‚úÖ Usu√°rio registrado com sucesso!")
            return True
        elif response.status_code == 400:
            data = response.json()
            if "j√° est√° registrado" in data.get('detail', ''):
                print("‚ÑπÔ∏è  Usu√°rio j√° existe (ok para teste)")
                return True
        
        print("‚ùå Falha no registro do usu√°rio")
        return False
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def test_login_flow():
    """Testa fluxo completo de login com 2FA."""
    print_step(3, "Testando fluxo de login - Etapa 1")
    
    # Etapa 1: Login
    login_data = {
        "email": TEST_EMAIL,
        "password": TEST_PASSWORD
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/login", json=login_data)
        print_response(response, show_full=True)
        
        if response.status_code != 200:
            print("‚ùå Falha na etapa 1 do login")
            return None
        
        data = response.json()
        temp_token = data.get('temp_token')
        
        if not temp_token:
            print("‚ùå Token tempor√°rio n√£o recebido")
            return None
        
        print("‚úÖ Etapa 1 do login conclu√≠da!")
        print(f"   Token tempor√°rio: {temp_token[:20]}...")
        
        # Simular c√≥digo 2FA (em produ√ß√£o, seria enviado por email/SMS)
        print_step(4, "Testando fluxo de login - Etapa 2 (2FA)")
        print("‚ÑπÔ∏è  Em um cen√°rio real, voc√™ receberia um c√≥digo por email/SMS")
        print("‚ÑπÔ∏è  Para este teste, vamos simular um c√≥digo v√°lido")
        
        # Para teste, vamos usar um c√≥digo que sabemos que existe no banco
        # Em produ√ß√£o, o usu√°rio digitaria o c√≥digo recebido
        test_code = input("   Digite o c√≥digo 2FA (ou pressione Enter para simular): ").strip()
        
        if not test_code:
            print("   Simulando c√≥digo 2FA...")
            # Para teste, vamos tentar alguns c√≥digos comuns de teste
            test_codes = ["123456", "000000", "111111"]
            
            for code in test_codes:
                twofa_data = {
                    "temp_token": temp_token,
                    "code": code
                }
                
                response = requests.post(f"{BASE_URL}/auth/2fa/verify", json=twofa_data)
                if response.status_code == 200:
                    test_code = code
                    break
            
            if not test_code:
                print("‚ùå N√£o foi poss√≠vel simular c√≥digo 2FA v√°lido")
                print("   Configure o email/SMS ou insira manualmente um c√≥digo v√°lido")
                return None
        
        twofa_data = {
            "temp_token": temp_token,
            "code": test_code
        }
        
        response = requests.post(f"{BASE_URL}/auth/2fa/verify", json=twofa_data)
        print_response(response, show_full=True)
        
        if response.status_code == 200:
            data = response.json()
            access_token = data.get('access_token')
            refresh_token = data.get('refresh_token')
            
            print("‚úÖ Login completo com sucesso!")
            print(f"   Access Token: {access_token[:30] if access_token else 'N/A'}...")
            print(f"   Refresh Token: {refresh_token[:30] if refresh_token else 'N/A'}...")
            
            return {
                'access_token': access_token,
                'refresh_token': refresh_token,
                'user': data.get('user', {})
            }
        else:
            print("‚ùå Falha na verifica√ß√£o 2FA")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def test_authenticated_endpoints(tokens):
    """Testa endpoints que requerem autentica√ß√£o."""
    print_step(5, "Testando endpoints autenticados")
    
    if not tokens or not tokens.get('access_token'):
        print("‚ùå Token de acesso n√£o dispon√≠vel")
        return False
    
    headers = {
        'Authorization': f"Bearer {tokens['access_token']}"
    }
    
    # Testar endpoint /auth/me
    print("\nüìã Testando GET /auth/me")
    try:
        response = requests.get(f"{BASE_URL}/auth/me", headers=headers)
        print_response(response)
        
        if response.status_code == 200:
            print("‚úÖ Informa√ß√µes do usu√°rio obtidas com sucesso!")
        else:
            print("‚ùå Falha ao obter informa√ß√µes do usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    # Testar endpoint /devices
    print("\nüìã Testando GET /devices")
    try:
        response = requests.get(f"{BASE_URL}/devices", headers=headers)
        print_response(response)
        
        if response.status_code == 200:
            print("‚úÖ Lista de dispositivos obtida com sucesso!")
        else:
            print("‚ùå Falha ao obter lista de dispositivos")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    # Testar endpoint /logs
    print("\nüìã Testando GET /logs")
    try:
        response = requests.get(f"{BASE_URL}/logs", headers=headers)
        print_response(response)
        
        if response.status_code == 200:
            print("‚úÖ Logs obtidos com sucesso!")
        else:
            print("‚ùå Falha ao obter logs")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    return True

def test_refresh_token(tokens):
    """Testa renova√ß√£o do access token."""
    print_step(6, "Testando renova√ß√£o de token")
    
    if not tokens or not tokens.get('refresh_token'):
        print("‚ùå Refresh token n√£o dispon√≠vel")
        return False
    
    refresh_data = {
        "refresh_token": tokens['refresh_token']
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/refresh", json=refresh_data)
        print_response(response, show_full=True)
        
        if response.status_code == 200:
            data = response.json()
            new_access_token = data.get('access_token')
            print("‚úÖ Token renovado com sucesso!")
            print(f"   Novo Access Token: {new_access_token[:30] if new_access_token else 'N/A'}...")
            return True
        else:
            print("‚ùå Falha na renova√ß√£o do token")
            return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def test_biometric_verification(tokens):
    """Testa verifica√ß√£o biom√©trica simulada."""
    print_step(7, "Testando verifica√ß√£o biom√©trica simulada")
    
    if not tokens or not tokens.get('access_token'):
        print("‚ùå Token de acesso n√£o dispon√≠vel")
        return False
    
    headers = {
        'Authorization': f"Bearer {tokens['access_token']}"
    }
    
    user_id = tokens.get('user', {}).get('id', 1)
    
    # Simular dados biom√©tricos (hash simulado)
    biometric_data = "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6"
    
    biometric_request = {
        "user_id": user_id,
        "biometric_data": biometric_data,
        "device_info": "Test Device - Python Script"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/auth/biometric/verify", 
                               json=biometric_request, headers=headers)
        print_response(response, show_full=True)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('verified'):
                print("‚úÖ Verifica√ß√£o biom√©trica aprovada!")
            else:
                print("‚ÑπÔ∏è  Verifica√ß√£o biom√©trica rejeitada (esperado para dados simulados)")
            return True
        else:
            print("‚ùå Falha na verifica√ß√£o biom√©trica")
            return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def main():
    """Fun√ß√£o principal do teste."""
    print_header("TESTE DO SISTEMA DE AUTENTICA√á√ÉO IOTRAC")
    print("Este script testa os principais endpoints de autentica√ß√£o implementados.")
    print("Certifique-se de que o servidor esteja rodando antes de continuar.")
    
    input("\nPressione Enter para come√ßar os testes...")
    
    # Teste 1: Conex√£o com servidor
    if not test_server_connection():
        print("\n‚ùå Testes interrompidos - servidor n√£o est√° dispon√≠vel")
        sys.exit(1)
    
    # Teste 2: Registro de usu√°rio
    if not test_user_registration():
        print("\n‚ùå Testes interrompidos - falha no registro")
        sys.exit(1)
    
    # Teste 3 e 4: Fluxo de login com 2FA
    tokens = test_login_flow()
    if not tokens:
        print("\n‚ùå Testes interrompidos - falha no login")
        sys.exit(1)
    
    # Teste 5: Endpoints autenticados
    test_authenticated_endpoints(tokens)
    
    # Teste 6: Renova√ß√£o de token
    test_refresh_token(tokens)
    
    # Teste 7: Verifica√ß√£o biom√©trica
    test_biometric_verification(tokens)
    
    print_header("RESUMO DOS TESTES")
    print("‚úÖ Conex√£o com servidor")
    print("‚úÖ Registro de usu√°rio")
    print("‚úÖ Login com 2FA")
    print("‚úÖ Endpoints autenticados")
    print("‚úÖ Renova√ß√£o de token")
    print("‚úÖ Verifica√ß√£o biom√©trica")
    
    print("\nüéâ Todos os testes do sistema de autentica√ß√£o foram conclu√≠dos!")
    print("\nüìã PR√ìXIMOS PASSOS PARA O FRONTEND:")
    print("   1. Implementar tela de login")
    print("   2. Implementar tela de verifica√ß√£o 2FA")
    print("   3. Implementar gerenciamento de tokens")
    print("   4. Implementar tela de verifica√ß√£o biom√©trica")
    print("   5. Adicionar headers de autoriza√ß√£o nas requisi√ß√µes")
    
    print(f"\nüîó ENDPOINTS DISPON√çVEIS:")
    print(f"   Base URL: {BASE_URL}")
    print(f"   Documenta√ß√£o: {BASE_URL}/docs")
    
if __name__ == "__main__":
    main() 